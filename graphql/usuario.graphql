type Query @guard(with: "api"){
    usuarios: [Usuario!]! @paginate(defaultCount: 10)
    usuario(id: ID @eq): Usuario @find
    perfil: Usuario @auth
}

type Mutation {
    login(input: LoginInput): AutenticacaoPayload! @field(resolver: "UsuarioMutator@login")
    recuperar_senha(input: RecuperarSenhaInput): Boolean @field(resolver: "UsuarioMutator@recuperaSenha") @recuperarSenhaValidation 
    altera_senha_com_token(input: AlteraSenhaComTokenInput @spread): AutenticacaoPayload @field(resolver: "UsuarioMutator@alteraSenhaComToken")    
}

extend type Mutation @guard(with: "api") {
    logout: Boolean @field(resolver: "UsuarioMutator@logout")
    novo_usuario(input: UsuarioInput @spread): Usuario @field(resolver: "UsuarioMutator@novoUsuario") 
    altera_senha(input: AlteraSenhaInput @spread): Boolean @field(resolver: "UsuarioMutator@alteraSenha") 
    altera_perfil(id: ID @eq, input: PerfilInput): PerfilResponse  @field(resolver: "UsuarioMutator@alteraPerfil") 
}

type Usuario {
    id: ID!
    name: String!
    email: String!
    created_at: DateTime!
    updated_at: DateTime!
}

input LoginInput {
    email: String!
    password: String!
}

input UsuarioInput {
    name: String!
    email: String! @rules(apply: ["unique:users,email"])
    password: String! @rules(apply: ["confirmed"]) @hash
    password_confirmation: String
}

input PerfilInput {
    name: String
}

input RecuperarSenhaInput {
    email: String!
}

input AlteraSenhaComTokenInput {
    token: String!
    password: String! @rules(apply: ["confirmed"])
    password_confirmation: String!
}

input AlteraSenhaInput {
    password: String! @rules(apply: ["confirmed"])
    password_confirmation: String!
}

type AutenticacaoPayload {
    usuario: Usuario
    access_token: String
    token_type: String
    expires_in: Int
}

type PerfilResponse {
    perfil: Usuario
}